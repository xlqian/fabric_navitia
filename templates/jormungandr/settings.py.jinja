#encoding: utf-8
#
## File managed by fabric, don't edit directly
#

#emplacement ou charger les fichier de configuration par instances
INSTANCES_DIR='{{env.jormungandr_instances_dir}}'

#chaine de connnection à postgresql pour la base jormungandr
SQLALCHEMY_DATABASE_URI ='postgresql://{{env.tyr_postgresql_user}}:{{env.tyr_postgresql_password}}@{{env.postgresql_database_host}}/{{env.tyr_postgresql_database}}'

#désactivation de l'authentification
PUBLIC={{env.jormungandr_is_public}}


{% if env.jormungandr_pool_size %}
#limit the connection pool size of sqlalchemy
SQLALCHEMY_POOL_SIZE = {{env.jormungandr_pool_size}}
{% endif %}

# logger configuration
from jormungandr.logging_utils import IdFilter
LOGGER = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters':{
        'default': {
            'format': '[%(asctime)s] [%(request_id)s] [%(levelname)5s] [%(process)5s] [%(name)10s] %(message)s'
        },
        'syslog': {
            'format': 'jormungandr: [%(asctime)s] [%(request_id)s] [%(levelname)5s] [%(process)5s] [%(name)10s] %(message)s'
        }
    },
    'filters': {
        'IdFilter': {
            '()': IdFilter,
        }
    },
    'handlers': {
        'default': {
            'level': "{{env.jormungandr_log_level}}",
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'default',
            "filename": "{{env.jormungandr_log_file}}",
            "maxBytes": "20000000",
            "backupCount": "5",
            "filters": ['IdFilter']
        },
        {% if env.use_syslog %}
        'syslog': {
        'level': "{{env.jormungandr_log_level}}",
        'class': 'logging.handlers.SysLogHandler',
        'address': '/dev/log',
        'facility': "{{env.jormungandr_syslog_facility}}",
        'formatter': 'syslog',
        'filters': ['IdFilter']
        },
        {% endif %}
    },
    'loggers': {
        '': {
            'level': "{{env.jormungandr_log_level}}",
            'handlers': ['{{env.jormungandr_default_handler}}'],
            'propagate': True
        },
    }
}

SAVE_STAT = {{env.jormungandr_save_stats}}
BROKER_URL = 'amqp://{{env.jormungandr_broker_username}}:{{env.jormungandr_broker_password}}@{{env.rabbitmq_host}}:{{env.rabbitmq_port}}//'
EXCHANGE_NAME = '{{env.stat_broker_exchange}}'

{% for key, value in env.jormungandr_additional_settings.iteritems() %}
{{key}} = {{value}}
{% endfor %}

# We can't set socket timeout on redis if we use CACHE_REDIS_URL...
CACHE_CONFIGURATION = {
{% if env.jormungandr_enable_redis %}
    'CACHE_TYPE': 'redis',
    'CACHE_REDIS_HOST': '{{env.redis_host}}',
    'CACHE_REDIS_PORT': '{{env.redis_port}}',
    'CACHE_REDIS_DB': '{{env.jormungandr_redis_db}}',
    'CACHE_OPTIONS': {'socket_timeout': {{env.redis_socket_timeout}}},
    {% if env.jormungandr_redis_password %}
    'CACHE_REDIS_PASSWORD': '{{env.jormungandr_redis_password}}',
    {% endif %}
{% else %}
    'CACHE_TYPE': 'simple',
{% endif %}
    'CACHE_KEY_PREFIX': 'jormungandr.',
    'TIMEOUT_PTOBJECTS': {{env.jormungandr_cache_timeout}},
    'TIMEOUT_AUTHENTICATION': {{env.jormungandr_cache_timeout}},
    'TIMEOUT_PARAMS': {{env.jormungandr_cache_timeout}},
    'TIMEOUT_TIMEO': {{env.jormungandr_timeo_cache_timeout}},
}


{% if env.bragi_url %}
AUTOCOMPLETE = {
    "class": "jormungandr.autocomplete.geocodejson.GeocodeJson",
    'args': {
        "host": "{{env.bragi_url}}",
        "timeout": {{env.bragi_timeout}},
    }
}
{% endif %}

{% if env.jormungandr_bss_provider %}
BSS_PROVIDER = {{env.jormungandr_bss_provider}}
{% endif %}

{% if env.jormungandr_patch_with_gevent_socket %}
PATCH_WITH_GEVENT_SOCKET = {{env.jormungandr_patch_with_gevent_socket}}
{% endif %}

